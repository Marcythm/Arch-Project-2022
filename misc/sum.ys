# Heda Chen 520021910863

.pos 0
init:
    irmovl  stack, %esp     # initialize %esp
    call    main
    halt

.align 4                    # data section
ele1:
    .long 0x00a
    .long ele2
ele2:
    .long 0x0b0
    .long ele3
ele3:
    .long 0xc00
    .long 0

main:
    irmovl  ele1, %edi      # following the calling conventions, use %rdi
    call    sum_list        # (here %edi) to store the first argument
    ret
sum_list:
    irmovl  0, %eax         # initialize `sum`: `sum = 0`
    jmp     check_condition # jump into loop, and check loop condition first: `while (ls)`
L3:
    mrmovl  (%edi), %ecx    # load the value of current element: `tmp = *(ls->val)` (because
                            # in Y86 the addition can only be performed between registers)
    addl    %ecx, %eax      # add the value to `sum`: `sum += tmp`
    mrmovl  4(%edi), %edi   # move the pointer to the next element: `ls = ls->next`
check_condition:
    andl    %edi, %edi      # check if current pointer is 0: `ls == NULL`
    jne     L3              # if not, jump to L3
    ret

.pos 0x100
stack:
